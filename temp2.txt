#include<string>
#include<iostream>
#include<fstream>
#include <cstdlib>
#include <unordered_map>
#include <unordered_set>
using namespace std;

struct own {
    int length;
    unordered_set<int> neighbors;
};


unordered_map<int, own> *map(int **array, int len) {
    unordered_map<int, own> *nodeset = new unordered_map<int, own>;
    for (int i = 0; i < len; ++i) {
        for(int j = 0; j < 2; ++j) {
         //    cout << "not hitting?" << endl;
          //  cout << "the number" << array[i][j] << endl;
            std::unordered_map<int, own>::const_iterator got = nodeset->find (array[i][j]);
            if (got == nodeset->end()) {
                unordered_set<int> new_set;
                    if (j == 1) {
                        new_set.insert(array[i][j-1]);
                    } else {
                        new_set.insert(array[i][j+1]);
                    }
                    own n = {1, new_set};
                    (*nodeset)[array[i][j]] = n;
            //        cout << "why" << endl;
            //        cout<< "what" << ((*nodeset)[array[i][j]]).length << endl;
            } else {
//              cout << "hit3" << endl;
                int moderator = 0;
                if (j == 1) {
                    moderator = -1;
                } else {
                    moderator = 1;
                }
              //  std::unordered_set<int>::const_iterator get = ->find (array[i][j]);
                if (((*nodeset)[array[i][j]]).neighbors.find(array[i][j+moderator]) == ((*nodeset)[array[i][j]]).neighbors.end()) {
             //     cout<< "hit2" << endl;
                 ((*nodeset)[array[i][j]]).neighbors.insert(array[i][j+moderator]);
                 ++((*nodeset)[array[i][j]]).length;
                }
            }
        }
    }
    return nodeset;
}

/*
int main () {
   //  unordered_map<int, own> nodeset;
    int array1[2] = {1,2};
    int array2[2] = {2,3};
    int array3[2] = {3,4};
    int len = 3;
    int *a[3] = {array1, array2, array3};
    unordered_map<int, own> *node = map(a,3);

    cout << (*node)[1].length << endl;
    cout << (*node)[2].length << endl;
    cout << (*node)[3].length << endl;
    cout << (*node)[4].length << endl;
     for (auto i = (*node)[1].neighbors.begin(); i != (*node)[1].neighbors.end(); ++i) {
                        std::cout << "wtf" << (*i) << std::endl;
                            }
     for (auto i = (*node)[2].neighbors.begin(); i != (*node)[1].neighbors.end(); ++i) {
                                 std::cout << "wtfo" << (*i) << std::endl;
                                                             }
     for (auto i = (*node)[3].neighbors.begin(); i != (*node)[1].neighbors.end(); ++i) {
                                 std::cout << "wtfw`" << (*i) << std::endl;
                                                             }
     for (auto i = (*node)[4].neighbors.begin(); i != (*node)[1].neighbors.end(); ++i) {
                                          std::cout << "wtfw`" << (*i) << std::endl;
                                                                                                       }
}
    for (int i = 0; i < len; ++i) {
        for(int j = 0
        if (nodeset.find

    unordered_set<int> first = {5,4,6,7};
    unordered_set<int> second = {3,2,1,4};
    unordered_set<int> third {1,2,3};
    unordered_map<int, unordered_set<int>> nodeset = {
        {3, second},
        {2, first}
    };
    nodeset[5] = third;
    for (auto i = nodeset.begin(); i != nodeset.end(); ++i) {
        cout << i->first;
    }
}

    unordered_set<int> myset = {5,6,7,8};
    myset.insert(4);
    for (auto i = myset.begin(); i != myset.end(); ++i) {
            std::cout << (*i) << std::endl;
    }

*/
